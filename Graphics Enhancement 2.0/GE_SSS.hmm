Code "SSSFix"
//Code snippets to get the display resolution taken from Hyper's "Fix resolution resetting on launch"
	#include "Reflection" noemit

	#lib "Reflection"
	#using "NeedleFxSceneData"
	#lib "HMM"
	#lib "INI"
	#lib "GameManager"

	#import "Services"
	#load "System.Xml.dll"

	using System.IO;
	using System.Xml.Serialization;
	using System.Runtime.InteropServices;

	[StructLayout(LayoutKind.Explicit, Size = 0x1610)]
	public struct FxParamManager
	{
	    [FieldOffset(0x80)] public NeedleFxSceneData.NeedleFxParameter parameters;
	    [FieldOffset(0x12f0)] public NeedleFxSceneData.NeedleFxSceneConfig sceneConfig;
	}

	static bool IsConfigInitialised = false;
	static int GE_SSSConfig = 0;
//
if (!IsConfigInitialised)
        {
            var mod = HMM.GetModByID("D5F33650");

            if (mod == null)
                return;

            string modConfigIniPath = System.IO.Path.Combine(mod.Path, "config.ini");
            var ini = INI.Read(modConfigIniPath);

            GE_SSSConfig = INI.Parse<int>(ini["Fixes"]["GE_SSSConfig"], GE_SSSConfig);
            IsConfigInitialised = true;
        }

if (GE_SSSConfig == 1)
        {
            string xml = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                @"SEGA\SonicFrontiers\steam\x64\screen_setting.xml"
            );

            try
            {
                if (File.Exists(xml))
                {
                    using (StringReader reader = new StringReader(File.ReadAllText(xml)))
                    {
                        var screenSetting = (ScreenSetting)new XmlSerializer(typeof(ScreenSetting)).Deserialize(reader);

                        if (screenSetting.ResolutionWidth <= 0 || screenSetting.ResolutionHeight <= 0)
                        {
                            screenSetting.ResolutionWidth = 1280;
                            screenSetting.ResolutionHeight = 720;
                        }

                        var fxParamManager = GameManager.GetService<FxParamManager>();
                        if (fxParamManager == null)
                            return;
                        float internalResolution = fxParamManager->sceneConfig.dynamicResolution.fixedResolutionRatio;
                        float sssWidth = screenSetting.ResolutionHeight * 0.14f * internalResolution;

                        string[] levelIds = { "w1r01", "w1r02", "w1r03", "w1r04", "w2r01", "w3r01", "w1f01", "w5r01", "w5t01", "w5t02", "w6d01", "w8d01", "w9d04", "w6d02", "w7d04", "w6d06", "w9d06", "w6d05", "w8d03", "w7d02", "w7d06", "w8d04", "w6d03", "w8d05", "w6d04", "w6d08", "w8d02", "w6d09", "w6d07", "w8d06", "w7d03", "w7d08", "w9d02", "w7d01", "w9d03", "w6d10", "w7d07", "w9d05", "w7d05", "w9d07" };

                        foreach (string levelId in levelIds)
                        {
                            var NeedleFxSceneDataInfo = Reflection.GetDataInfo<NeedleFxSceneData.Root>(levelId);

                            if (NeedleFxSceneDataInfo.pData == null)
                                continue;

                            fxParamManager->parameters.ssss.width = sssWidth;

                            RFL_SET_PARAM(NeedleFxSceneDataInfo, items[0].ssss.strength[0].X, 0.75f);
                            RFL_SET_PARAM(NeedleFxSceneDataInfo, items[0].ssss.strength[0].Y, 0.15f);
                            RFL_SET_PARAM(NeedleFxSceneDataInfo, items[0].ssss.strength[0].Z, 0f);
                            RFL_SET_PARAM(NeedleFxSceneDataInfo, items[0].ssss.strength[0].W, -1.0f);
                        }
                    }
                }
                else
                    return;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

    [XmlRoot(ElementName = "ScreenSetting")]
    public class ScreenSetting
    {
        [XmlAttribute(AttributeName = "left")]
        public int Left { get; set; }

        [XmlAttribute(AttributeName = "top")]
        public int Top { get; set; }

        [XmlAttribute(AttributeName = "width")]
        public int Width { get; set; }

        [XmlAttribute(AttributeName = "height")]
        public int Height { get; set; }

        [XmlAttribute(AttributeName = "resolutionWidth")]
        public int ResolutionWidth { get; set; }

        [XmlAttribute(AttributeName = "resolutionHeight")]
        public int ResolutionHeight { get; set; }

        [XmlAttribute(AttributeName = "fullscreenStyle")]
        public int FullscreenStyle { get; set; }

        [XmlAttribute(AttributeName = "fullscreenState")]
        public int FullscreenState { get; set; }
    }